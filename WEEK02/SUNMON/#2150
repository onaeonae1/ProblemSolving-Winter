/**
 * NAME: SCC
 * LINK: https://www.acmicpc.net/problem/2150
 * DATE: 2020-01-12 
 * AUTHOR: sunmon
 * TIP:
 * 1. 역방향 간선이 루트 here 위로 있으면 -> 같은 SCC
 * 2. here 보다 먼저 발견 & 아직 SCC로 묶여 있지 않은 정점으로 가는 교차 간선 있음 -> 같은 SCC
**/

#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
using namespace std;

vector<vector<int>> adj;    //인접리스트로 표현
vector<int> sccID, discovered;
stack<int> visited;
int sccCounter, vertexCounter;

//dfs. 같은 scc내 제일 먼저 접근한 노드 번호 반환
//NOTE: 인접리스트, 인접행렬따라 코드 세부사항 조금 다름 주의
int scc(int here)
{
    int ret = discovered[here] = vertexCounter++;
    visited.push(here);
    //인접 노드 순회
    for(int i = 0; i<adj[here].size(); i++)
    {
        int there = adj[here][i];
        //방문 안 한 곳 -> 방문한다
        if(discovered[there] == -1) 
            ret = min(ret, scc(there));
        //이미 방문 완료 & 아직 sccID 미정인 경우면 먼저 본 애를 기준으로 한다
        else if (sccID[there] == -1)
            ret = min(ret, discovered[there]);
    }

    //here에서 부모로 올라가는 간선 끊을지 결정 & 번호붙이기
    if(ret == discovered[here])
    {
        //here가 scc의 루트일 떄, here까지 한 scc로 묶음
        while(true)
        {
            int t = visited.top();
            visited.pop();
            sccID[t] = sccCounter;
            if(t==here) break;
        }
        sccCounter++;
    }
    return ret;
}

//타잔 알고리즘을 이용하여 sccID 배열을 리턴
vector<int> tarjanSCC()
{
    //배열 초기화
    sccID = discovered = vector<int>(adj.size(), -1);
    //카운터 초기화
    sccCounter = vertexCounter = 0;
    //dfsAll
    for(int i = 0; i < adj.size(); i++)
        if(discovered[i] == -1) scc(i);
    return sccID;
}

int main()
{
 
    // freopen("input.txt", "r", stdin);

    int V, E;
    cin >> V >> E;


    //input vals
    adj = vector<vector<int> >(V, vector<int>());
    while(E--)
    {
        int a, b;
        cin >> a >> b;
        adj[a-1].push_back(b-1);
    }


    tarjanSCC();


    //print answer
    vector<vector<int> > temp = vector<vector<int> >(sccCounter, vector<int>());
    for(int s = 0; s<sccCounter; s++)
    {
        for(int i = 0; i<sccID.size(); i++)
            if( s == sccID[i]) temp[s].push_back(i+1);
        temp[s].push_back(-1);
    }
    sort(temp.begin(), temp.end());

    cout << sccCounter << endl;
    for(auto& a:temp)
    {
        for(auto& b: a) cout << b << " ";
        cout << endl;
    }
}
